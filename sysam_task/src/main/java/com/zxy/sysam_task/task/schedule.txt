package com.zxy.sysam_task.task;

import com.zxy.sysam_task.utils.SpringContextUtil;
import org.apache.commons.lang3.StringUtils;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.stereotype.Component;

import java.lang.reflect.Method;
import java.util.Map;

/**
 * @ProjectName: sysam
 * @Package: com.zxy.sysam_task.config
 * @ClassName: TestQuartz
 * @Author: jibl
 * @Description:
 * @Date: 2021/1/25 11:10
 * @Version: 1.0
 */
@Component
public class ScheduleJob implements Job {

    private Object target;
    private Method method;
    private String params;

    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
//        //获取任务名
//        String taskName = context.getJobDetail().getKey().getName();
//        Map map = context.getTrigger().getJobDataMap();
//        //处理执行任务之后的业务
//        System.out.println("=====================任务名："+taskName + "=====》》开始执行===============");
//        //1.无参
//        try {
//            String methodName = map.get("methodName").toString();
//            String params = map.get("params").toString();
//            Method method = null;
//            if(params.equals("")){
//                method = this.getClass().getMethod(methodName);
//                method.invoke(this);
//            }else{
//                method = this.getClass().getMethod(methodName,Class.forName("java.lang.String"));
//                method.invoke(this, params);
//            }
//        } catch (Exception e) {
//            System.out.println(e);
//        }
        Map map = context.getTrigger().getJobDataMap();
        com.zxy.sysam_task.entity.Job job = (com.zxy.sysam_task.entity.Job) map.get("job");
        this.target = SpringContextUtil.getBean("testTask");
        String params = job.getParams();
        String methodName = job.getMethodName();
        this.params = params;

        try {
            if (StringUtils.isNotBlank(params)) {
                method = target.getClass().getDeclaredMethod(methodName, String.class);
                method.invoke(target, params);
            } else {
                method = target.getClass().getDeclaredMethod(methodName);
                method.invoke(target);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

}
